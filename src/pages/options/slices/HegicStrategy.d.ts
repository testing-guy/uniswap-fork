/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface HegicStrategyInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "calculateNegativepnlAndPositivepnl(uint256,uint256,bytes[])": FunctionFragment;
    "connect()": FunctionFragment;
    "create(uint256,address,uint256,uint256,bytes[])": FunctionFragment;
    "getAvailableContracts(uint32,bytes[])": FunctionFragment;
    "getLockedByStrategy()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isPayoffAvailable(uint256,address,address)": FunctionFragment;
    "k()": FunctionFragment;
    "lockedLimit()": FunctionFragment;
    "payOffAmount(uint256)": FunctionFragment;
    "pool()": FunctionFragment;
    "priceProvider()": FunctionFragment;
    "pricer()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setK(uint256)": FunctionFragment;
    "setLimit(uint256)": FunctionFragment;
    "setPricer(address)": FunctionFragment;
    "strategyData(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNegativepnlAndPositivepnl",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "connect", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableContracts",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedByStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPayoffAvailable",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "k", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockedLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payOffAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pricer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setK", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPricer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "strategyData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNegativepnlAndPositivepnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedByStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPayoffAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "k", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payOffAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pricer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPricer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "Acquired(uint256,tuple,uint256,uint256,uint256,bytes[])": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetLimit(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Acquired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLimit"): EventFragment;
}

export class HegicStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: HegicStrategyInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    calculateNegativepnlAndPositivepnl(
      amount: BigNumberish,
      period: BigNumberish,
      arg2: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      negativepnl: BigNumber;
      positivepnl: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculateNegativepnlAndPositivepnl(uint256,uint256,bytes[])"(
      amount: BigNumberish,
      period: BigNumberish,
      arg2: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      negativepnl: BigNumber;
      positivepnl: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    connect(overrides?: Overrides): Promise<ContractTransaction>;

    "connect()"(overrides?: Overrides): Promise<ContractTransaction>;

    create(
      id: BigNumberish,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create(uint256,address,uint256,uint256,bytes[])"(
      id: BigNumberish,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAvailableContracts(
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      available: BigNumber;
      0: BigNumber;
    }>;

    "getAvailableContracts(uint32,bytes[])"(
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      available: BigNumber;
      0: BigNumber;
    }>;

    getLockedByStrategy(
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    "getLockedByStrategy()"(
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isPayoffAvailable(
      optionID: BigNumberish,
      caller: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isPayoffAvailable(uint256,address,address)"(
      optionID: BigNumberish,
      caller: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    k(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "k()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lockedLimit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lockedLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    payOffAmount(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      profit: BigNumber;
      0: BigNumber;
    }>;

    "payOffAmount(uint256)"(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      profit: BigNumber;
      0: BigNumber;
    }>;

    pool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    priceProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "priceProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pricer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pricer()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setK(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setK(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLimit(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLimit(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPricer(
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPricer(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    strategyData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      strike: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "strategyData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      strike: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  calculateNegativepnlAndPositivepnl(
    amount: BigNumberish,
    period: BigNumberish,
    arg2: BytesLike[],
    overrides?: CallOverrides
  ): Promise<{
    negativepnl: BigNumber;
    positivepnl: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "calculateNegativepnlAndPositivepnl(uint256,uint256,bytes[])"(
    amount: BigNumberish,
    period: BigNumberish,
    arg2: BytesLike[],
    overrides?: CallOverrides
  ): Promise<{
    negativepnl: BigNumber;
    positivepnl: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  connect(overrides?: Overrides): Promise<ContractTransaction>;

  "connect()"(overrides?: Overrides): Promise<ContractTransaction>;

  create(
    id: BigNumberish,
    holder: string,
    amount: BigNumberish,
    period: BigNumberish,
    additional: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create(uint256,address,uint256,uint256,bytes[])"(
    id: BigNumberish,
    holder: string,
    amount: BigNumberish,
    period: BigNumberish,
    additional: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAvailableContracts(
    period: BigNumberish,
    additional: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAvailableContracts(uint32,bytes[])"(
    period: BigNumberish,
    additional: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLockedByStrategy(overrides?: CallOverrides): Promise<BigNumber>;

  "getLockedByStrategy()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPayoffAvailable(
    optionID: BigNumberish,
    caller: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPayoffAvailable(uint256,address,address)"(
    optionID: BigNumberish,
    caller: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  k(overrides?: CallOverrides): Promise<BigNumber>;

  "k()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  payOffAmount(
    optionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "payOffAmount(uint256)"(
    optionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  priceProvider(overrides?: CallOverrides): Promise<string>;

  "priceProvider()"(overrides?: CallOverrides): Promise<string>;

  pricer(overrides?: CallOverrides): Promise<string>;

  "pricer()"(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setK(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setK(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLimit(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLimit(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPricer(value: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setPricer(address)"(
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  strategyData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    strike: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "strategyData(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    strike: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    calculateNegativepnlAndPositivepnl(
      amount: BigNumberish,
      period: BigNumberish,
      arg2: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      negativepnl: BigNumber;
      positivepnl: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculateNegativepnlAndPositivepnl(uint256,uint256,bytes[])"(
      amount: BigNumberish,
      period: BigNumberish,
      arg2: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      negativepnl: BigNumber;
      positivepnl: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    connect(overrides?: CallOverrides): Promise<void>;

    "connect()"(overrides?: CallOverrides): Promise<void>;

    create(
      id: BigNumberish,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      expiration: number;
      negativePNL: BigNumber;
      positivePNL: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    "create(uint256,address,uint256,uint256,bytes[])"(
      id: BigNumberish,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      expiration: number;
      negativePNL: BigNumber;
      positivePNL: BigNumber;
      0: number;
      1: BigNumber;
      2: BigNumber;
    }>;

    getAvailableContracts(
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAvailableContracts(uint32,bytes[])"(
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedByStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    "getLockedByStrategy()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPayoffAvailable(
      optionID: BigNumberish,
      caller: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPayoffAvailable(uint256,address,address)"(
      optionID: BigNumberish,
      caller: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    "k()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    payOffAmount(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "payOffAmount(uint256)"(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    priceProvider(overrides?: CallOverrides): Promise<string>;

    "priceProvider()"(overrides?: CallOverrides): Promise<string>;

    pricer(overrides?: CallOverrides): Promise<string>;

    "pricer()"(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setK(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setK(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimit(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setLimit(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricer(value: string, overrides?: CallOverrides): Promise<void>;

    "setPricer(address)"(
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      strike: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "strategyData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      strike: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Acquired(
      id: BigNumberish | null,
      data: null,
      negativepnl: null,
      positivepnl: null,
      period: null,
      additional: null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    SetLimit(limit: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateNegativepnlAndPositivepnl(
      amount: BigNumberish,
      period: BigNumberish,
      arg2: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateNegativepnlAndPositivepnl(uint256,uint256,bytes[])"(
      amount: BigNumberish,
      period: BigNumberish,
      arg2: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connect(overrides?: Overrides): Promise<BigNumber>;

    "connect()"(overrides?: Overrides): Promise<BigNumber>;

    create(
      id: BigNumberish,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create(uint256,address,uint256,uint256,bytes[])"(
      id: BigNumberish,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAvailableContracts(
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAvailableContracts(uint32,bytes[])"(
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedByStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    "getLockedByStrategy()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPayoffAvailable(
      optionID: BigNumberish,
      caller: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPayoffAvailable(uint256,address,address)"(
      optionID: BigNumberish,
      caller: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    "k()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    payOffAmount(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "payOffAmount(uint256)"(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "priceProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricer(overrides?: CallOverrides): Promise<BigNumber>;

    "pricer()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setK(value: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setK(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLimit(value: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setLimit(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPricer(value: string, overrides?: Overrides): Promise<BigNumber>;

    "setPricer(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    strategyData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "strategyData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateNegativepnlAndPositivepnl(
      amount: BigNumberish,
      period: BigNumberish,
      arg2: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateNegativepnlAndPositivepnl(uint256,uint256,bytes[])"(
      amount: BigNumberish,
      period: BigNumberish,
      arg2: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connect(overrides?: Overrides): Promise<PopulatedTransaction>;

    "connect()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    create(
      id: BigNumberish,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create(uint256,address,uint256,uint256,bytes[])"(
      id: BigNumberish,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAvailableContracts(
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAvailableContracts(uint32,bytes[])"(
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedByStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLockedByStrategy()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPayoffAvailable(
      optionID: BigNumberish,
      caller: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPayoffAvailable(uint256,address,address)"(
      optionID: BigNumberish,
      caller: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    k(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "k()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payOffAmount(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "payOffAmount(uint256)"(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceProvider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pricer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setK(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setK(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLimit(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLimit(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPricer(
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPricer(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    strategyData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "strategyData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
