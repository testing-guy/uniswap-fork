/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OperationalTreasuryInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "acceptedStrategy(address)": FunctionFragment;
    "addStrategy(address)": FunctionFragment;
    "benchmark()": FunctionFragment;
    "buy(address,address,uint256,uint256,bytes[])": FunctionFragment;
    "connectStrategy(address)": FunctionFragment;
    "coverPool()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "lockedByStrategy(address)": FunctionFragment;
    "lockedLiquidity(uint256)": FunctionFragment;
    "lockedPremium()": FunctionFragment;
    "manager()": FunctionFragment;
    "maxLockupPeriod()": FunctionFragment;
    "mayBeAcceptedAtEpoch(address)": FunctionFragment;
    "payOff(uint256,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "replenish()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBenchmark(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalLocked()": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedStrategy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addStrategy", values: [string]): string;
  encodeFunctionData(functionFragment: "benchmark", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "connectStrategy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "coverPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedByStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedPremium",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxLockupPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mayBeAcceptedAtEpoch",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "payOff",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "replenish", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBenchmark",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "benchmark", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coverPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedByStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mayBeAcceptedAtEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payOff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "replenish", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBenchmark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Expired(uint256)": EventFragment;
    "Paid(uint256,address,uint256)": EventFragment;
    "Replenished(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Expired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Replenished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class OperationalTreasury extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OperationalTreasuryInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    acceptedStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "acceptedStrategy(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    addStrategy(s: string, overrides?: Overrides): Promise<ContractTransaction>;

    "addStrategy(address)"(
      s: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    benchmark(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "benchmark()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    buy(
      strategy: string,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buy(address,address,uint256,uint256,bytes[])"(
      strategy: string,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    connectStrategy(
      s: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "connectStrategy(address)"(
      s: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    coverPool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "coverPool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lockedByStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lockedByStrategy(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lockedLiquidity(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strategy: string;
      negativepnl: BigNumber;
      positivepnl: BigNumber;
      expiration: number;
      0: number;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: number;
    }>;

    "lockedLiquidity(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strategy: string;
      negativepnl: BigNumber;
      positivepnl: BigNumber;
      expiration: number;
      0: number;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: number;
    }>;

    lockedPremium(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lockedPremium()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    manager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "manager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    maxLockupPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxLockupPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mayBeAcceptedAtEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "mayBeAcceptedAtEpoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    payOff(
      positionID: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "payOff(uint256,address)"(
      positionID: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    replenish(overrides?: Overrides): Promise<ContractTransaction>;

    "replenish()"(overrides?: Overrides): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBenchmark(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBenchmark(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalBalance(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalBalance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalLocked(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalLocked()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    unlock(
      lockedLiquidityID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlock(uint256)"(
      lockedLiquidityID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  acceptedStrategy(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "acceptedStrategy(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addStrategy(s: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addStrategy(address)"(
    s: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  benchmark(overrides?: CallOverrides): Promise<BigNumber>;

  "benchmark()"(overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    strategy: string,
    holder: string,
    amount: BigNumberish,
    period: BigNumberish,
    additional: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buy(address,address,uint256,uint256,bytes[])"(
    strategy: string,
    holder: string,
    amount: BigNumberish,
    period: BigNumberish,
    additional: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  connectStrategy(
    s: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "connectStrategy(address)"(
    s: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  coverPool(overrides?: CallOverrides): Promise<string>;

  "coverPool()"(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockedByStrategy(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lockedByStrategy(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedLiquidity(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    strategy: string;
    negativepnl: BigNumber;
    positivepnl: BigNumber;
    expiration: number;
    0: number;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: number;
  }>;

  "lockedLiquidity(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    strategy: string;
    negativepnl: BigNumber;
    positivepnl: BigNumber;
    expiration: number;
    0: number;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: number;
  }>;

  lockedPremium(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedPremium()"(overrides?: CallOverrides): Promise<BigNumber>;

  manager(overrides?: CallOverrides): Promise<string>;

  "manager()"(overrides?: CallOverrides): Promise<string>;

  maxLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLockupPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  mayBeAcceptedAtEpoch(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mayBeAcceptedAtEpoch(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payOff(
    positionID: BigNumberish,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "payOff(uint256,address)"(
    positionID: BigNumberish,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  replenish(overrides?: Overrides): Promise<ContractTransaction>;

  "replenish()"(overrides?: Overrides): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBenchmark(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBenchmark(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

  unlock(
    lockedLiquidityID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlock(uint256)"(
    lockedLiquidityID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    acceptedStrategy(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "acceptedStrategy(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addStrategy(s: string, overrides?: CallOverrides): Promise<void>;

    "addStrategy(address)"(s: string, overrides?: CallOverrides): Promise<void>;

    benchmark(overrides?: CallOverrides): Promise<BigNumber>;

    "benchmark()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      strategy: string,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(address,address,uint256,uint256,bytes[])"(
      strategy: string,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    connectStrategy(s: string, overrides?: CallOverrides): Promise<void>;

    "connectStrategy(address)"(
      s: string,
      overrides?: CallOverrides
    ): Promise<void>;

    coverPool(overrides?: CallOverrides): Promise<string>;

    "coverPool()"(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockedByStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedByStrategy(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedLiquidity(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strategy: string;
      negativepnl: BigNumber;
      positivepnl: BigNumber;
      expiration: number;
      0: number;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: number;
    }>;

    "lockedLiquidity(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      strategy: string;
      negativepnl: BigNumber;
      positivepnl: BigNumber;
      expiration: number;
      0: number;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: number;
    }>;

    lockedPremium(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedPremium()"(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<string>;

    "manager()"(overrides?: CallOverrides): Promise<string>;

    maxLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLockupPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    mayBeAcceptedAtEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mayBeAcceptedAtEpoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payOff(
      positionID: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "payOff(uint256,address)"(
      positionID: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    replenish(overrides?: CallOverrides): Promise<void>;

    "replenish()"(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBenchmark(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setBenchmark(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      lockedLiquidityID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlock(uint256)"(
      lockedLiquidityID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Expired(id: BigNumberish | null): EventFilter;

    Paid(
      id: BigNumberish | null,
      account: string | null,
      amount: null
    ): EventFilter;

    Replenished(amount: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptedStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "acceptedStrategy(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStrategy(s: string, overrides?: Overrides): Promise<BigNumber>;

    "addStrategy(address)"(
      s: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    benchmark(overrides?: CallOverrides): Promise<BigNumber>;

    "benchmark()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      strategy: string,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buy(address,address,uint256,uint256,bytes[])"(
      strategy: string,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    connectStrategy(s: string, overrides?: Overrides): Promise<BigNumber>;

    "connectStrategy(address)"(
      s: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    coverPool(overrides?: CallOverrides): Promise<BigNumber>;

    "coverPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedByStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedByStrategy(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedLiquidity(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedLiquidity(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedPremium(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedPremium()"(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    "manager()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLockupPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    mayBeAcceptedAtEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mayBeAcceptedAtEpoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payOff(
      positionID: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "payOff(uint256,address)"(
      positionID: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    replenish(overrides?: Overrides): Promise<BigNumber>;

    "replenish()"(overrides?: Overrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBenchmark(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBenchmark(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      lockedLiquidityID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlock(uint256)"(
      lockedLiquidityID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptedStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "acceptedStrategy(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStrategy(
      s: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addStrategy(address)"(
      s: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    benchmark(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "benchmark()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      strategy: string,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buy(address,address,uint256,uint256,bytes[])"(
      strategy: string,
      holder: string,
      amount: BigNumberish,
      period: BigNumberish,
      additional: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    connectStrategy(
      s: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "connectStrategy(address)"(
      s: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    coverPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coverPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedByStrategy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedByStrategy(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedLiquidity(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedLiquidity(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedPremium(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedPremium()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "manager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLockupPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxLockupPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mayBeAcceptedAtEpoch(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mayBeAcceptedAtEpoch(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payOff(
      positionID: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "payOff(uint256,address)"(
      positionID: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    replenish(overrides?: Overrides): Promise<PopulatedTransaction>;

    "replenish()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBenchmark(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBenchmark(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalLocked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      lockedLiquidityID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlock(uint256)"(
      lockedLiquidityID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
